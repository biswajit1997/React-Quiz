{"ast":null,"code":"import ActionType from \"../Actions/ActionType\";\nconst initialState = {\n  //  this is our initital state of the app\n  quiz: [],\n  name: \"\",\n  playQuiz: [],\n  answers: []\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let actions = arguments.length > 1 ? arguments[1] : undefined;\n  // the reducer containes all the necessary functions in order to update our state accordingly\n  if (actions.type === ActionType.ADDQUIZ) {\n    return {\n      ...state,\n      quiz: [...state.quiz, actions.payload]\n    };\n  }\n  if (actions.type === ActionType.TOGGLEACTIVE) {\n    const quizEl = state.quiz.find(el => el.id === actions.payload);\n    const filteredArr = state.quiz.filter(el => el.id !== actions.payload);\n    const newArr = [{\n      ...quizEl,\n      isActive: !quizEl.isActive\n    }, ...filteredArr];\n    return {\n      ...state,\n      quiz: newArr\n    };\n  }\n  if (actions.type === ActionType.DELETQUIZ) {\n    const filteredArr = state.quiz.filter(el => el.id !== actions.payload);\n    return {\n      ...state,\n      quiz: filteredArr\n    };\n  }\n  if (actions.type === ActionType.GETNAME) {\n    return {\n      ...state,\n      name: actions.payload\n    };\n  }\n  if (actions.type === ActionType.PLAYQUIZ) {\n    const quizEl = state.quiz.find(el => el.id === actions.payload);\n    return {\n      ...state,\n      playQuiz: quizEl,\n      title: quizEl.title\n    };\n  }\n  if (actions.type === ActionType.GETANSWER) {\n    return {\n      ...state,\n      answers: [...state.answers, actions.payload]\n    };\n  }\n  if (actions.type === ActionType.RESET) {\n    return {\n      ...state,\n      name: \"\",\n      playQuiz: [],\n      answers: []\n    };\n  }\n  return state;\n};\nexport default reducer;","map":{"version":3,"names":["ActionType","initialState","quiz","name","playQuiz","answers","reducer","state","arguments","length","undefined","actions","type","ADDQUIZ","payload","TOGGLEACTIVE","quizEl","find","el","id","filteredArr","filter","newArr","isActive","DELETQUIZ","GETNAME","PLAYQUIZ","title","GETANSWER","RESET"],"sources":["/Users/biswajitpradhannte-333/Project/Quiz-Platform/src/Redux/Reducer/Reducer.js"],"sourcesContent":["import ActionType from \"../Actions/ActionType\";\n\nconst initialState = {\n  //  this is our initital state of the app\n  quiz: [],\n  name: \"\",\n  playQuiz: [],\n  answers: [],\n};\n\nconst reducer = (state = initialState, actions) => {\n  // the reducer containes all the necessary functions in order to update our state accordingly\n  if (actions.type === ActionType.ADDQUIZ) {\n    return { ...state, quiz: [...state.quiz, actions.payload] };\n  }\n  if (actions.type === ActionType.TOGGLEACTIVE) {\n    const quizEl = state.quiz.find((el) => el.id === actions.payload);\n\n    const filteredArr = state.quiz.filter((el) => el.id !== actions.payload);\n\n    const newArr = [{ ...quizEl, isActive: !quizEl.isActive }, ...filteredArr];\n    return {\n      ...state,\n      quiz: newArr,\n    };\n  }\n\n  if (actions.type === ActionType.DELETQUIZ) {\n    const filteredArr = state.quiz.filter((el) => el.id !== actions.payload);\n\n    return {\n      ...state,\n      quiz: filteredArr,\n    };\n  }\n  if (actions.type === ActionType.GETNAME) {\n    return {\n      ...state,\n      name: actions.payload,\n    };\n  }\n  if (actions.type === ActionType.PLAYQUIZ) {\n    const quizEl = state.quiz.find((el) => el.id === actions.payload);\n    return {\n      ...state,\n      playQuiz: quizEl,\n      title: quizEl.title,\n    };\n  }\n  if (actions.type === ActionType.GETANSWER) {\n    return {\n      ...state,\n      answers: [...state.answers, actions.payload],\n    };\n  }\n  if (actions.type === ActionType.RESET) {\n    return {\n      ...state,\n      name: \"\",\n      playQuiz: [],\n      answers: [],\n    };\n  }\n  return state;\n};\n\nexport default reducer;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAE9C,MAAMC,YAAY,GAAG;EACnB;EACAC,IAAI,EAAE,EAAE;EACRC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAmC;EAAA,IAAlCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5C;EACA,IAAIC,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAACa,OAAO,EAAE;IACvC,OAAO;MAAE,GAAGN,KAAK;MAAEL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAES,OAAO,CAACG,OAAO;IAAE,CAAC;EAC7D;EACA,IAAIH,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAACe,YAAY,EAAE;IAC5C,MAAMC,MAAM,GAAGT,KAAK,CAACL,IAAI,CAACe,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAEjE,MAAMM,WAAW,GAAGb,KAAK,CAACL,IAAI,CAACmB,MAAM,CAAEH,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAExE,MAAMQ,MAAM,GAAG,CAAC;MAAE,GAAGN,MAAM;MAAEO,QAAQ,EAAE,CAACP,MAAM,CAACO;IAAS,CAAC,EAAE,GAAGH,WAAW,CAAC;IAC1E,OAAO;MACL,GAAGb,KAAK;MACRL,IAAI,EAAEoB;IACR,CAAC;EACH;EAEA,IAAIX,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAACwB,SAAS,EAAE;IACzC,MAAMJ,WAAW,GAAGb,KAAK,CAACL,IAAI,CAACmB,MAAM,CAAEH,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAExE,OAAO;MACL,GAAGP,KAAK;MACRL,IAAI,EAAEkB;IACR,CAAC;EACH;EACA,IAAIT,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAACyB,OAAO,EAAE;IACvC,OAAO;MACL,GAAGlB,KAAK;MACRJ,IAAI,EAAEQ,OAAO,CAACG;IAChB,CAAC;EACH;EACA,IAAIH,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAAC0B,QAAQ,EAAE;IACxC,MAAMV,MAAM,GAAGT,KAAK,CAACL,IAAI,CAACe,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IACjE,OAAO;MACL,GAAGP,KAAK;MACRH,QAAQ,EAAEY,MAAM;MAChBW,KAAK,EAAEX,MAAM,CAACW;IAChB,CAAC;EACH;EACA,IAAIhB,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAAC4B,SAAS,EAAE;IACzC,OAAO;MACL,GAAGrB,KAAK;MACRF,OAAO,EAAE,CAAC,GAAGE,KAAK,CAACF,OAAO,EAAEM,OAAO,CAACG,OAAO;IAC7C,CAAC;EACH;EACA,IAAIH,OAAO,CAACC,IAAI,KAAKZ,UAAU,CAAC6B,KAAK,EAAE;IACrC,OAAO;MACL,GAAGtB,KAAK;MACRJ,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;IACX,CAAC;EACH;EACA,OAAOE,KAAK;AACd,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}